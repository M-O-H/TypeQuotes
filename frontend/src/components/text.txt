
	const [quote, setQuote] = useState({});
	const elRefs = useRef([])
	var index = 0;

	const fetchQuotes = async()=>{
		await axios.get('https://api.quotable.io/random')
		.then(res => {
			elRefs.current = 
			Array(res.data.content.length).fill().map((_, i) => 
				elRefs.current[i] || createRef());
			setQuote(res.data);
		})
		.catch((err) => {
			throw err;
		})
	}

	const checkChar = (key, ele) => {

	console.log(index)
		if(key === ele[index].current.innerHTML){
			ele[index].current.className = 'done'
			index++
		}
		else if(key === 'Backspace' && index > 0){
			ele[index].current.className = ''
			index--
			ele[index].current.className = ''
		}
		else if(key !== ele[index].current.innerHTMLL){
			ele[index].current.className = 'incorrect'
			index++;
		}
		if(index == ele.length)
			window.removeEventListener('keydown', handlekeyDown);
			// setStatus
		else ele[index].current.className = 'cursor'
	}

	const handlekeyDown = (e) => {
		let currentChar = elRefs.current
		checkChar(e.key, currentChar)
	}

	const handleClick = (e) => {
		e.target.blur();
		fetchQuotes()
	}

	useEffect(() => {
		fetchQuotes();
		return () => 
		window.removeEventListener('keydown', handlekeyDown);
	}, []);
	// console.log(index)

	// reset the game
	useEffect(() => {
		elRefs.current.map(ele => ele.current.className = 'char')
	}, [quote])

	// add event when quote loadded
	if(quote.content) 
		window.addEventListener('keydown', handlekeyDown);
